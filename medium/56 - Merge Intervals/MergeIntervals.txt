https://leetcode.com/problems/merge-intervals/

Problem:
  Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, 
  and return an array of the non-overlapping intervals that cover all the intervals in the input.

Examples:
  Example 1:
  Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
  Output: [[1,6],[8,10],[15,18]]
  Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

  Example 2:
  Input: intervals = [[1,4],[4,5]]
  Output: [[1,5]]
  Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 
Constraints:
  1 <= intervals.length <= 104
  intervals[i].length == 2
  0 <= starti <= endi <= 104

Pattern(s): Array

Parameter(s): int[][] intervals

Algorithm:
First, we sort the list as described. 
Then, we insert the first interval into our merged list and continue considering each interval in turn as follows: 
  If the current interval begins after the previous interval ends, then they do not overlap and we can append the current interval to merged. 
  Otherwise, they do overlap, and we merge them by updating the end of the previous interval if it is less than the end of the current interval.

Code:
  class Solution {
      public int[][] merge(int[][] intervals) {
          Arrays.sort(intervals, (a,b) -> Integer.compare(a[0], b[0])); //nlogn
          LinkedList<int[]> merged = new LinkedList<>();
          for (int[] interval : intervals) {
              if (merged.isEmpty() || merged.getLast()[1] < interval[0]) {
                  merged.add(interval);
              } else {
                  merged.getLast()[1] = Math.max(merged.getLast()[1], interval[1]);
              }
          }
          
          return merged.toArray(new int[merged.size()][]);
      }
  }

Complexity Analysis:
  Time: O(nlogn)
  Space: O(logn) or O(n) - If we can sort the array in place, O(logn), otherwise O(n)