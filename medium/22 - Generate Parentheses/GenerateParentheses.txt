https://leetcode.com/problems/generate-parentheses/

Problem:
  Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

Examples:
  Example 1:
  Input: n = 3
  Output: ["((()))","(()())","(())()","()(())","()()()"]

  Example 2:
  Input: n = 1
  Output: ["()"]
 

Constraints:
  1 <= n <= 8

Pattern(s): String, Backtracking

Parameter(s): int n

Algorithm:
  Instead of adding '(' or ')' every time as in Approach 1, let's only add them when we know it will remain a valid sequence. 
  We can do this by keeping track of the number of opening and closing brackets we have placed so far.

  We can start an opening bracket if we still have one (of n) left to place. 
  And we can start a closing bracket if it would not exceed the number of opening brackets.

Code:
  class Solution {
      public List<String> generateParenthesis(int n) {
          List<String> result = new ArrayList<>();
          backtrack(n, 0, 0, result, new StringBuilder());
          return result;
      }
      
      private void backtrack(int n, int openN, int closedN, List<String> result, StringBuilder current) {
          if (openN == n && closedN == n) {
              result.add(current.toString());
              return;
          }
          
          if (openN < n) {
              current.append('(');
              backtrack(n, openN + 1, closedN, result, current);
              current.deleteCharAt(current.length() - 1);
          }
          
          if (closedN < openN) {
              current.append(')');
              backtrack(n, openN, closedN + 1, result, current);
              current.deleteCharAt(current.length() - 1);
          }
      }
  }

Complexity Analysis:
  Time: O((4^n)/(sqrt(n)))
  Space: O((4^n)/(sqrt(n)))