https://leetcode.com/problems/min-stack/

Problem:
  Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

  Implement the MinStack class:

  MinStack() initializes the stack object.
  void push(int val) pushes the element val onto the stack.
  void pop() removes the element on the top of the stack.
  int top() gets the top element of the stack.
  int getMin() retrieves the minimum element in the stack.

  You must implement a solution with O(1) time complexity for each function.

Examples:
  Example 1:
  Input
  ["MinStack","push","push","push","getMin","pop","top","getMin"]
  [[],[-2],[0],[-3],[],[],[],[]]

  Output
  [null,null,null,null,-3,null,0,-2]

  Explanation
  MinStack minStack = new MinStack();
  minStack.push(-2);
  minStack.push(0);
  minStack.push(-3);
  minStack.getMin(); // return -3
  minStack.pop();
  minStack.top();    // return 0
  minStack.getMin(); // return -2
 
Constraints:
  -231 <= val <= 231 - 1
  Methods pop, top and getMin operations will always be called on non-empty stacks.
  At most 3 * 104 calls will be made to push, pop, top, and getMin.

Pattern(s): Stack, Design

Parameter(s): n/a

Algorithm:
  Constructor():
    Initialize two integer stacks, one for values and one for current minimum value

  Push(int val):
    Push val to valueStack

    If mimimumStack is not empty
      Push mimimum of val and minimumStack.peek() to minimumStack
    Otherwise
      Push val to minimumStack
    
  Pop():
    Pop valueStack and minimumStack

  Top():
    Peek valueStack

  GetMin():
    Peek minimumStack

Code:
  class MinStack {
      private Deque<Integer> stack;
      private Deque<Integer> minValue;
      
      public MinStack() {
          stack = new LinkedList<>();
          minValue = new LinkedList<>();
      }
      
      public void push(int val) {
          stack.push(val);
          
          if (minValue.size() > 0) {
              minValue.push(Math.min(val, minValue.peek()));
          } else {
              minValue.push(val);
          }
      }
      
      public void pop() {
          stack.pop();
          minValue.pop();
      }
      
      public int top() {
          return stack.peek();
      }
      
      public int getMin() {
          return minValue.peek();
      }
  }

Complexity Analysis:
  Time: O(1) - All operations use O(1) time
  Space: O(n) - Extra space to maintain min stack