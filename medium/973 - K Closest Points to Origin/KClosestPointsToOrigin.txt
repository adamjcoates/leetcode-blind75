https://leetcode.com/problems/k-closest-points-to-origin/

Problem:
  Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, 
  return the k closest points to the origin (0, 0).

  The distance between two points on the X-Y plane is the Euclidean distance (i.e., âˆš(x1 - x2)2 + (y1 - y2)2).

  You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

Examples
  Example 1:
  Input: points = [[1,3],[-2,2]], k = 1
  Output: [[-2,2]]
  Explanation:
  The distance between (1, 3) and the origin is sqrt(10).
  The distance between (-2, 2) and the origin is sqrt(8).
  Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
  We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].

  Example 2:
  Input: points = [[3,3],[5,-1],[-2,4]], k = 2
  Output: [[3,3],[-2,4]]
  Explanation: The answer [[-2,4],[3,3]] would also be accepted.
 

Constraints:
  1 <= k <= points.length <= 104
  -104 < xi, yi < 104

Pattern(s): Heap

Parameter(s): int[][] points, int k

Algorithm:
  Create a max heap of points that will maintain k of the closest points to the origin
  (Note: You will have to create a custom comparator for max heap: (p1, p2) -> distanceFromOrigin(p2) - distanceFromOrigin(p1))
  (Or: new Comparator<int[]>() { 
            @Override
            public int compare(int[] left, int[] right) {
                return distanceFromOrigin(right) - distanceFromOrigin(left);
            }
        }
  )

  Add points to max heap
    If the heap size ever is greater than k after adding a point, poll a point

  Create a new resulting 2D Array of size [k][2]
  Populate this Array with points in heap (starting from the back of the Array, because the heap is a max heap and the Array should be in ascending order)

Code:
  class Solution {
      public int[][] kClosest(int[][] points, int k) {
          PriorityQueue<int[]> maxHeap = new PriorityQueue<>((p1, p2) -> distanceFromOrigin(p2) - distanceFromOrigin(p1));
          
          //Add k closest points to maxHeap
          //O(nlogk)
          for (int[] point : points) {
              maxHeap.offer(point); //O(logk)
              
              if (maxHeap.size() > k) {
                  maxHeap.poll();
              }
          }
          
          int[][] result = new int[maxHeap.size()][2];
          //Add all points in heap to result array
          for (int i = k - 1; i >= 0; i--) {
              result[i] = maxHeap.poll(); //O(1)
          }
          
          return result;
      }
      
      private int distanceFromOrigin(int[] point) {
          return point[0] * point[0] + point[1] * point[1];
      }
  }

Complexity Analysis:
  Time: O(nlogk) - We are maintaining a heap of size k, looping through all of the points
  Space: O(k) - We need a heap of k elements