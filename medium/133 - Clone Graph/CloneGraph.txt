https://leetcode.com/problems/clone-graph/

Problem:
  Given a reference of a node in a connected undirected graph.

  Return a deep copy (clone) of the graph.

  Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

  class Node {
      public int val;
      public List<Node> neighbors;
  }
  
  Test case format:
  For simplicity, each node's value is the same as the node's index (1-indexed). 
  For example, the first node with val == 1, the second node with val == 2, and so on. 
  The graph is represented in the test case using an adjacency list.

  An adjacency list is a collection of unordered lists used to represent a finite graph. 
  Each list describes the set of neighbors of a node in the graph.

  The given node will always be the first node with val = 1. 
  You must return the copy of the given node as a reference to the cloned graph.

Examples:
  Example 1:
  Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
  Output: [[2,4],[1,3],[2,4],[1,3]]
  Explanation: There are 4 nodes in the graph.
  1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
  2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
  3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
  4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).

  Example 2:
  Input: adjList = [[]]
  Output: [[]]
  Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.

  Example 3:
  Input: adjList = []
  Output: []
  Explanation: This an empty graph, it does not have any nodes.

Constraints:
  The number of nodes in the graph is in the range [0, 100].
  1 <= Node.val <= 100
  Node.val is unique for each node.
  There are no repeated edges and no self-loops in the graph.
  The Graph is connected and all nodes can be visited starting from the given node.

Pattern(s): Graph, DFS, Map

Parameter(s): Node node

Algorithm:
  Initialize a HashMap<Integer, Node> to store references to our cloned nodes
  Pass our root node and our HashMap to our recursive DFS function to clone nodes

  DFS helper method that takes a Node and a HashMap as parameters
  Base case:
    If the node is null, return null
    If the HashMap contains the node value as a key, return the Node reference from the HashMap

  Recursive case:
    Create a clone of the node
    Put the cloned value and reference to new cloned node as a key-value pair into the HashMap

    Loop through the neighbors of the original node's adjancency list
      Add the result of clone(neighbor, HashMap) to the new node's adjancency list

    Return the new node

Code:
  /*
  // Definition for a Node.
  class Node {
      public int val;
      public List<Node> neighbors;
      public Node() {
          val = 0;
          neighbors = new ArrayList<Node>();
      }
      public Node(int _val) {
          val = _val;
          neighbors = new ArrayList<Node>();
      }
      public Node(int _val, ArrayList<Node> _neighbors) {
          val = _val;
          neighbors = _neighbors;
      }
  }
  */

  class Solution {    
      public Node cloneGraph(Node node) {
          HashMap<Integer, Node> oldToNew = new HashMap<>();
          return clone(node, oldToNew);
      }
      
      private Node clone(Node node, HashMap<Integer, Node> oldToNew) {
          if (node == null) return null;
          
          if (oldToNew.containsKey(node.val)) return oldToNew.get(node.val);
          
          Node newNode = new Node(node.val);
          oldToNew.put(newNode.val, newNode);
          
          for (Node neighbor : node.neighbors) {
              newNode.neighbors.add(clone(neighbor, oldToNew));
          }
          
          return newNode;
      }
  }

Complexity Analysis:
  Time: O(n + m) - n is number of nodes and m is the number of edges
  Space: O(n)