https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/

Problem:
  Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder 
  is the inorder traversal of the same tree, construct and return the binary tree.

Examples:
  Example 1:
  Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
  Output: [3,9,20,null,null,15,7]

  Example 2:
  Input: preorder = [-1], inorder = [-1]
  Output: [-1]
 
Constraints:
  1 <= preorder.length <= 3000
  inorder.length == preorder.length
  -3000 <= preorder[i], inorder[i] <= 3000
  preorder and inorder consist of unique values.
  Each value of inorder also appears in preorder.
  preorder is guaranteed to be the preorder traversal of the tree.
  inorder is guaranteed to be the inorder traversal of the tree.

Pattern(s): Binary Tree, Recursion

Parameter(s): int[] preorder, int[] inorder

Algorithm:
  Build a hashmap to record the relation of value -> index for inorder, so that we can find the position of root in constant time.

  Initialize an integer variable preorderIndex to keep track of the element that will be used to construct the root.

  Implement the recursion function arrayToTree which takes a range of inorder and returns the constructed binary tree:
    if the range is empty, return null;
    initialize the root with preorder[preorderIndex] and then increment preorderIndex;
    recursively use the left and right portions of inorder to construct the left and right subtrees.
    
  Simply call the recursion function with the entire range of inorder.

Code:
  class Solution {
      int preorderIndex;
      Map<Integer, Integer> inorderIndexMap;
      public TreeNode buildTree(int[] preorder, int[] inorder) {
          preorderIndex = 0;
          // build a hashmap to store value -> its index relations
          inorderIndexMap = new HashMap<>();
          for (int i = 0; i < inorder.length; i++) {
              inorderIndexMap.put(inorder[i], i);
          }

          return arrayToTree(preorder, 0, preorder.length - 1);
      }

      private TreeNode arrayToTree(int[] preorder, int left, int right) {
          // if there are no elements to construct the tree
          if (left > right) return null;

          // select the preorder_index element as the root and increment it
          int rootValue = preorder[preorderIndex++];
          TreeNode root = new TreeNode(rootValue);

          // build left and right subtree
          // excluding inorderIndexMap[rootValue] element because it's the root
          root.left = arrayToTree(preorder, left, inorderIndexMap.get(rootValue) - 1);
          root.right = arrayToTree(preorder, inorderIndexMap.get(rootValue) + 1, right);
          return root;
      }
  }

Complexity Analysis:
  Time: O(n)
  Space: O(n)