https://leetcode.com/problems/search-in-rotated-sorted-array/

Problem:
  There is an integer array nums sorted in ascending order (with distinct values).

  Prior to being passed to your function, 
  nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) 
  such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). 
  For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

  Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

  You must write an algorithm with O(log n) runtime complexity.

Examples:
  Example 1:
  Input: nums = [4,5,6,7,0,1,2], target = 0
  Output: 4

  Example 2:
  Input: nums = [4,5,6,7,0,1,2], target = 3
  Output: -1

  Example 3:
  Input: nums = [1], target = 0
  Output: -1
 

Constraints:
  1 <= nums.length <= 5000
  -104 <= nums[i] <= 104
  All values of nums are unique.
  nums is an ascending array that is possibly rotated.
  -104 <= target <= 104

Pattern(s): Binary Search

Parameter(s): int[] nums, int target

Algorithm:
  Initialize two pointers left and right for binary search

  Loop while left is less than or equal to right
    Calculate midpoint

    If the element at our midpoint is equal to target, return midpoint

    Now we need to find the location of our pivot
    If the element at left is less than the element at the midpoint,
    the entire left part is monotonically increasing, which means the pivot point is on the right of our midpoint

      Now if the target value is greater than the element at the midpoint or if
      the target value is less than the value at the element at left
        Discard the left half of the array because the target must be on the right
      Otherwise,
        Discard the right half of the array because the target must be on the left

    Otherwise, the entire right part is monotonically increasing, which means the pivot point is on the left of our midpoint

      Now if the target value is less than the element at the midpoint or if
      the target value is greater than the value at the element at right
        Discard the right half of the array because the target must be on the left
      Otherwise,
        Discard the left half of the array because the target must be on the right

  If we get here return -1

Code:
  class Solution {
    public int search(int[] nums, int target) {
      int l = 0, r = nums.length - 1;
            
      while (l <= r) {
        int mid = l + (r - l) / 2;
                
        if (target == nums[mid]) return mid;
                
        //If the entire left part is monotonically increasing, which means the pivot point is on the right part
        if (nums[l] <= nums[mid]) {
          if (target > nums[mid] || target < nums[l]) {
            l = mid + 1;
          } else {
            r = mid - 1;
          }
        //If the entire right part is monotonically increasing, which means the pivot point is on the left part
        } else {
          if (target < nums[mid] || target > nums[r]) {
            r = mid - 1;
          } else {
            l = mid + 1;
          }
        }
      }
            
      return -1;
    }
  }

Complexity Analysis:
  Time: O(logn)
  Space: O(1)