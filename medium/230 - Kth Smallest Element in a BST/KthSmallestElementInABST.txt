https://leetcode.com/problems/kth-smallest-element-in-a-bst/

Problem:
  Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

Examples:
  Example 1:
  Input: root = [3,1,4,null,2], k = 1
  Output: 1

  Example 2:
  Input: root = [5,3,6,2,4,null,null,1], k = 3
  Output: 3
 
Constraints:
  The number of nodes in the tree is n.
  1 <= k <= n <= 104
  0 <= Node.val <= 104

Pattern(s): Binary Search Tree, DFS

Parameter(s): TreeNode root, int k

Algorithm:
  Perform inorder traversal on BST and then return k - 1 th index of ArrayList generated

Code:
  class Solution {
      public int kthSmallest(TreeNode root, int k) {
          ArrayList<Integer> nums = inorder(root, new ArrayList<Integer>());
          return nums.get(k - 1);
      }
      
      private ArrayList<Integer> inorder(TreeNode root, ArrayList<Integer> arr) {
          if (root == null) return arr;
          inorder(root.left, arr);
          arr.add(root.val);
          inorder(root.right, arr);
          return arr;
      }
  }

Complexity Analysis:
  Time: O(n)
  Space: O(n)