https://leetcode.com/problems/3sum/

Problem:
  Given an integer array nums, return all the triplets 
  [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

  Notice that the solution set must not contain duplicate triplets.

Examples:
  Example 1:
  Input: nums = [-1,0,1,2,-1,-4]
  Output: [[-1,-1,2],[-1,0,1]]
  Explanation: 
  nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
  nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
  nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
  The distinct triplets are [-1,0,1] and [-1,-1,2].
  Notice that the order of the output and the order of the triplets does not matter.

  Example 2:
  Input: nums = [0,1,1]
  Output: []
  Explanation: The only possible triplet does not sum up to 0.

  Example 3:
  Input: nums = [0,0,0]
  Output: [[0,0,0]]
  Explanation: The only possible triplet sums up to 0.
 

Constraints:
  3 <= nums.length <= 3000
  -105 <= nums[i] <= 105

Pattern(s): Array, Two Pointer

Parameter(s): int[] nums

Algorithm:
  Create a new 2D ArrayList of Integers
  Sort the input Array

  Loop through the input Array
    Guard clause if the current element is greater than 0, break since we cannot get a sum of 0 at this point due to sorting
    Guard clause if we encounter a duplicate value we've already seen, continue to next iteration of loop
    
    Initialize left and right pointer with remaining Array elements
    Loop while left is less than right
      Sum up elements pointed at by outer loop, left, and right pointers

      If the sum is greater than 0, we need to decrease our sum by decrementing right pointer
      If the sum is less than 0, we need to increase our sum by incrementing left pointer
      If the sum is 0
        Add triplet to result ArrayList
        Increment left pointer

        Now we need to make sure there are no duplicate values in two pointer window
        Loop while the left pointer element is equal to the element before it and while left is less than right
          Increment left pointer (Only need to update one pointer, two above conditions will shift other pointer)
          (Right pointer will never have a chance to have duplicate, because the left pointer will constantly be shifted then the sum is no longer 0)

Code:
  class Solution {
      public List<List<Integer>> threeSum(int[] nums) 
      {
          List<List<Integer>> result = new ArrayList<>();
          Arrays.sort(nums);
          
          for (int i = 0; i < nums.length; i++) {
              //Optimization: we cannot have a sum of 0 because the array is sorted
              if (nums[i] > 0) break;
              
              //If we encounter a duplicate value we've already seen
              if (i > 0 && nums[i] == nums[i - 1]) continue;
              
              //Implement two pointer 2Sum problem
              int left = i + 1, right = nums.length - 1;
              while (left < right) {
                  int threeSum = nums[i] + nums[left] + nums[right];
                  
                  if (threeSum > 0) right--;
                  else if (threeSum < 0) left++;
                  else {
                      result.add(Arrays.asList(nums[i], nums[left], nums[right]));
                      left++;
                      
                      //Only need to update one pointer, two above conditions will shift other pointer
                      while (nums[left] == nums[left - 1] && left < right)
                          left++;
                  }
              }
          }
          
          return result;
      }
  }
  
Complexity Analysis:
  Time: O(n^2)
  Space: O(n) - Arrays.sort() uses a dual-pivot Quicksort algorithm that requires O(n/2) extra space