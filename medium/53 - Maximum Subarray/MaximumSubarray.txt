https://leetcode.com/problems/maximum-subarray/

Problem:
  Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

  A subarray is a contiguous part of an array.
  
Examples:
  Example 1:
  Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
  Output: 6
  Explanation: [4,-1,2,1] has the largest sum = 6.

  Example 2:
  Input: nums = [1]
  Output: 1

  Example 3:
  Input: nums = [5,4,-1,7,8]
  Output: 23
 
Constraints:
  1 <= nums.length <= 105
  -104 <= nums[i] <= 104

Pattern(s): Array, Dynamic Programming

Parameter(s): int[] nums

Algorithm:
  Create variables to store current subarray sum and largest subarray sum
  Set their value to the first element of the array (first subarray we will look at)

  Loop through the array starting at the index 1
    Decide whether we add this element to the current subarray sum, or do we start a new subarray if the element is larger than the current sum
    (Find maximum between currentSum + element or just element)

    If this current sum is the largest, set its value to the maximum sum
    (Find maximum between current sum or maximum sum)
  
  Return the maximum sum
  

Code:
  class Solution {
      public int maxSubArray(int[] nums) {
          int currentSum = nums[0];
          int maxSum = currentSum;
          
          for (int i = 1; i < nums.length; i++) {
              currentSum = Math.max(currentSum + nums[i], nums[i]);
              maxSum = Math.max(maxSum, currentSum);
          }
          
          return maxSum;
      }
  }

Complexity Analysis:
  Time: O(n)
  Space: O(1)