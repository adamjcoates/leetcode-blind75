https://leetcode.com/problems/invert-binary-tree/

Problem:
  Given the root of a binary tree, invert the tree, and return its root.
 
Examples:
  Example 1:
  Input: root = [4,2,7,1,3,6,9]
  Output: [4,7,2,9,6,3,1]

  Example 2:
  Input: root = [2,1,3]
  Output: [2,3,1]

  Example 3:
  Input: root = []
  Output: []

Constraints:
  The number of nodes in the tree is in the range [0, 100].
  -100 <= Node.val <= 100

Pattern(s): Binary Tree

Parameter(s): TreeNode root

Algorithm:
  Recursive Approach
  Base case:
    If root node is null, return the root node or return null

  Recursive case:
    Set left node to invertTree(left child)
    Set right node to invertTree(right child)

    Swap nodes
    Left child = right node
    Right child = left node

    Return root node

Code:
  /**
  * Definition for a binary tree node.
  * public class TreeNode {
  *     int val;
  *     TreeNode left;
  *     TreeNode right;
  *     TreeNode() {}
  *     TreeNode(int val) { this.val = val; }
  *     TreeNode(int val, TreeNode left, TreeNode right) {
  *         this.val = val;
  *         this.left = left;
  *         this.right = right;
  *     }
  * }
  */
  class Solution {
      public TreeNode invertTree(TreeNode root) {
          if (root == null) return root;
          
          TreeNode left = invertTree(root.left);
          TreeNode right = invertTree(root.right);
          
          root.right = left;
          root.left = right;
          
          return root;
      }
  }

Complexity Analysis:
  Time: O(n)
  Space: O(n) - Worst case scenario (Ex: Every right child is null, essentially Linked List to make n recursive calls and n stack frames)