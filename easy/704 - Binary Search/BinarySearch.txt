https://leetcode.com/problems/binary-search/

Problem:
  Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.

  You must write an algorithm with O(log n) runtime complexity.

Examples:
  Example 1:
  Input: nums = [-1,0,3,5,9,12], target = 9
  Output: 4
  Explanation: 9 exists in nums and its index is 4
  Example 2:
  Input: nums = [-1,0,3,5,9,12], target = 2
  Output: -1
  Explanation: 2 does not exist in nums so return -1

Constraints:
  1 <= nums.length <= 104
  -104 < nums[i], target < 104
  All the integers in nums are unique.
  nums is sorted in ascending order.

Pattern(s): Binary Search, Two Pointer

Parameter(s): int[] nums, int target

Algorithm:
  Initialize a left and right pointer of the input array

  While (left <= right)
    Calculate midpoint of current window
    (midpoint = l + (r - l) / 2) <-- Window may not all be positive which is why we use this formula

    If element at the midpoint is equal to target, return midpoint index

    If element at the midpoint is greater than target, set right pointer to left of midpoint

    If element at the midpoint is less than target, set left pointer to right of midpoint

  Return -1 since target is not found at this point

Code:
  class Solution {
      public int search(int[] nums, int target) {
          
          int left = 0;
          int right = nums.length - 1;
          
          while (left <= right) {
              int mid = left + (right - left) / 2;
              
              if (nums[mid] == target) return mid;
              
              if (nums[mid] > target) right = mid - 1;
              
              if (nums[mid] < target) left = mid + 1;
          }
          
          return -1;
      }
  }

Complexity Analysis:
  Time: O(logn) - At each stage of search, split the input array in half
  Space: O(1)