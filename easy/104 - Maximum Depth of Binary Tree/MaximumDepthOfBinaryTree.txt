https://leetcode.com/problems/maximum-depth-of-binary-tree/

Problem:
  Given the root of a binary tree, return its maximum depth.

  A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Examples:
  Example 1:
  Input: root = [3,9,20,null,null,15,7]
  Output: 3

  Example 2:
  Input: root = [1,null,2]
  Output: 2
 
Constraints:
  The number of nodes in the tree is in the range [0, 104].
  -100 <= Node.val <= 100

Pattern(s): Binary Tree, DFS

Parameter(s): TreeNode root

Algorithm:
  Recursive DFS:
  Base case:
    If our root does not exist, we return a height of 0

  Recursive case:
    Return the height of the root (1) added to the higher height between the left and right subtrees

  Iterative BFS:
  If our root does not exist, we return a height of 0
  Initialize a queue of TreeNodes
  Add our root node to the queue

  Create a count variable to return our current level
  Loop while the queue is not empty
    Loop through the current elements in the queue
      Poll a TreeNode from the queue

      If its right child is not null, offer the right child to the queue
      If its left child is not null, offer the left child to the queue

    Increment our current level count

  Return the level count

Code:
  Recursive case:
  class Solution {
      public int maxDepth(TreeNode root) {
          if (root == null) return 0;
          
          return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
      }
  }

  Iterative:
  class Solution {
      public int maxDepth(TreeNode root) {
          if (root == null) return 0;
          
          Queue<TreeNode> q = new LinkedList<>();
          
          q.offer(root);
          
          int level = 0;
          while(!q.isEmpty()) {
              for (int i = q.size(); i > 0; i--) {
                  TreeNode node = q.poll();
                  
                  if (node.right != null) {
                      q.offer(node.right);
                  }
                  if (node.left != null) {
                      q.offer(node.left);
                  }
              }
              
              level++;
          }
          
          return level;
      }
  }

Complexity Analysis:
  Time:
    Recursive: O(n)
    Iterative: O(n)
  Space:
    Recursive: O(n) - n is the height of the tree
    Iterative: O(n)