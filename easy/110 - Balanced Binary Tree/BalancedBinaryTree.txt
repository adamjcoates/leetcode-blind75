https://leetcode.com/problems/balanced-binary-tree/

Problem:
  Given a binary tree, determine if it is height-balanced.

  For this problem, a height-balanced binary tree is defined as:

  a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

Examples:
  Example 1:
  Input: root = [3,9,20,null,null,15,7]
  Output: true

  Example 2:
  Input: root = [1,2,2,3,3,null,null,4,4]
  Output: false

  Example 3:
  Input: root = []
  Output: true

Pattern(s): Binary Tree, DFS

Parameter(s): TreeNode root

Algorithm:

Code:
  /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    final int UNBALANCED = -1;
    final int LEAF_HEIGHT = 1;
    
    public boolean isBalanced(TreeNode root) {
        if (root == null) return true;
        
        return dfs(root) != UNBALANCED;
    }
    
    private int dfs(TreeNode root) {
        if (root.left == null && root.right == null) return LEAF_HEIGHT;
        
        int leftHeight = 0;
        if (root.left != null) {
            leftHeight = dfs(root.left);
        }
        if (leftHeight == UNBALANCED) return UNBALANCED;
        
        int rightHeight = 0;
        if (root.right != null) {
            rightHeight = dfs(root.right);
        }
        if (rightHeight == UNBALANCED) return UNBALANCED;
        
        if (Math.abs(leftHeight - rightHeight) <= 1) return Math.max(leftHeight, rightHeight) + 1;
        
        return UNBALANCED;
    }
}

Complexity Analysis:
  Time: O(n) - visit every node of the tree
  Space: O(h) - where h is the height of the tree