https://leetcode.com/problems/longest-palindrome/

Problem:
  Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.

  Letters are case sensitive, for example, "Aa" is not considered a palindrome here.

Examples
  Example 1:
  Input: s = "abccccdd"
  Output: 7
  Explanation: One longest palindrome that can be built is "dccaccd", whose length is 7.

  Example 2:
  Input: s = "a"
  Output: 1
  Explanation: The longest palindrome that can be built is "a", whose length is 1.
 
Constraints:
  1 <= s.length <= 2000
  s consists of lowercase and/or uppercase English letters only.

Pattern(s): String, Map

Parameter(s): String s

Algorithm:
  Initialize a character frequency map with a size of 128 of ASCII tables
  since we need to support uppercase and lowercase letters

  Loop through each character of the String
    Increment the frequency of each character by using the character as an index for the map

  Initialize a count of the maximum length of the palindrome
  Loop through each frequency of the character map
    If the frequency is odd, subtract one and add the even value to our count variable
    If the frequency is even, add the even value to our count variable

  If our result count is less than the length of the original string, we can increment the count by 1 since we can add
  one odd letter to the middle of the palindrome

  Return our count

Code:
  class Solution {
      public int longestPalindrome(String s) {
          int[] charMap = new int[128];
          
          for (char c : s.toCharArray()) charMap[c]++;
          
          int result = 0;
          for (int freq : charMap) {
              result += freq / 2 * 2;
          }
          
          if (result < s.length()) result++;
          
          return result;
      }
  }

Complexity Analysis:
  Time: O(n)
  Space: O(1) - the alphabet size is fixed