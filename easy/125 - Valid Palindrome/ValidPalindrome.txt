https://leetcode.com/problems/valid-palindrome/

Problem:
  A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

  Given a string s, return true if it is a palindrome, or false otherwise.

Examples:
  Example 1:
  Input: s = "A man, a plan, a canal: Panama"
  Output: true
  Explanation: "amanaplanacanalpanama" is a palindrome.

  Example 2:
  Input: s = "race a car"
  Output: false
  Explanation: "raceacar" is not a palindrome.

  Example 3:
  Input: s = " "
  Output: true
  Explanation: s is an empty string "" after removing non-alphanumeric characters.
  Since an empty string reads the same forward and backward, it is a palindrome. 

Constraints:
  1 <= s.length <= 2 * 105
  s consists only of printable ASCII characters.

Pattern(s): Array, Two Pointer

Parameter(s): String s

Algorithm:
  Remove nonalphanumeric characters and convert string to lowercase

  Initialize left and right pointers at fixed string

  While left is less than right
    If the character at left is not equal to the character at right, return false

    Move both pointers inward

  Return true

  Create helper method to remove nonalphanumeric characters

  Note: Strings in Java are immutable, use a StringBuilder for appending characters

Code:
  class Solution {
      public boolean isPalindrome(String s) {
          
          String alphaNumeric = removeNonAlphanumeric(s.toLowerCase());
          int left = 0, right = alphaNumeric.length() - 1;
          
          while (left < right) {
              if (alphaNumeric.charAt(left) != alphaNumeric.charAt(right)) return false;
              
              left++; 
              right--;
          }
          
          return true;
          //return alphaNumeric.toString().equalsIgnoreCase(alphaNumeric.reverse().toString());
      }
      
      private String removeNonAlphanumeric(String s) {
          
          StringBuilder fixed = new StringBuilder(""); 
          
          for (char c : s.toCharArray()) {
              if (Character.isDigit(c) || Character.isLetter(c)) fixed.append(c);
          }
          
          return fixed.toString();
      }
  }

Complexity Analysis:
  Time: O(n)
  Space: O(n) - Creation of StringBuilder