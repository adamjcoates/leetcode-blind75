https://leetcode.com/problems/merge-two-sorted-lists/

Problem:
  You are given the heads of two sorted linked lists list1 and list2.

  Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

  Return the head of the merged linked list.

Examples:
  Example 1:
  Input: list1 = [1,2,4], list2 = [1,3,4]
  Output: [1,1,2,3,4,4]

  Example 2:
  Input: list1 = [], list2 = []
  Output: []

  Example 3:
  Input: list1 = [], list2 = [0]
  Output: [0]

Constraints:
  The number of nodes in both lists is in the range [0, 50].
  -100 <= Node.val <= 100
  Both list1 and list2 are sorted in non-decreasing order.

Pattern(s): Linked List, Two pointer

Parameter(s): ListNode l1, ListNode l2

Algorithm:
  Initialize ListNode dummyHead
  Initialize currentNode = dummyHead

  While l1 and l2 are not null
    If l1.val is less than l2.val,
      currentNode.next = l1
      l1 = l1.next
    Else
      currentNode.next = l2
      l2 = l2.next

  If l1 still has more nodes left, currentNode.next = l1
  If l2 still has more nodes left, currentNode.next = l2

  Return dummyHead.next 

Code:
  /**
  * Definition for singly-linked list.
  * public class ListNode {
  *     int val;
  *     ListNode next;
  *     ListNode() {}
  *     ListNode(int val) { this.val = val; }
  *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
  * }
  */
  class Solution {
      public ListNode mergeTwoLists(ListNode l1, ListNode l2) 
      {
          ListNode dummyHead = new ListNode(0);
          ListNode currentNode = dummyHead;
          
          while(l1 != null && l2 != null) {
              if (l1.val < l2.val) {
                  currentNode.next = l1;
                  l1 = l1.next;
              } else {
                  currentNode.next = l2;
                  l2 = l2.next;
              }
              
              currentNode = currentNode.next;
          }
          
          if (l1 != null) currentNode.next = l1;
          
          if (l2 != null) currentNode.next = l2;
          
          return dummyHead.next;
      }
  }

Complexity Analysis:
  Time: O(m + n) - Size of each list
  Space: O(1) - Modifying list in place