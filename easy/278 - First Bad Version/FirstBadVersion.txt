https://leetcode.com/problems/first-bad-version/

Problem:
  You are a product manager and currently leading a team to develop a new product. 
  Unfortunately, the latest version of your product fails the quality check. 
  Since each version is developed based on the previous version, all the versions after a bad version are also bad.

  Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

  You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version.
  You should minimize the number of calls to the API.

Examples:
  Example 1:
  Input: n = 5, bad = 4
  Output: 4
  Explanation:
  call isBadVersion(3) -> false
  call isBadVersion(5) -> true
  call isBadVersion(4) -> true
  Then 4 is the first bad version.

  Example 2:
  Input: n = 1, bad = 1
  Output: 1
 

Constraints:
  1 <= bad <= n <= 231 - 1

Pattern(s): Binary Search

Parameter(s): int n

Algorithm:
  Initialize left pointer to 1 and right pointer to n

  Loop while left is less than right
    Calculate midpoint of current window (midpoint = l + (r - l) / 2)

    Call isBadVersion() API on the midpoint
    If the midpoint is a bad version, set the right side our window to the midpoint
    (right = midpoint)

    If the midpoint is not a bad version, set the left side of our window to the midpoint + 1
    (left = midpoint + 1)
    (We add 1 because in a situation where the last number is the first bad version,
     if right = n and left = n-1, there will be an infinite loop where the left pointer does not increase unless we add 1)

    Return the left pointer
    

Code:
  /* The isBadVersion API is defined in the parent class VersionControl.
        boolean isBadVersion(int version); */

  public class Solution extends VersionControl {
      public int firstBadVersion(int n) {
          int left = 1;
          int right = n;
          
          while (left < right) {
              int mid = left + (right - left) / 2;
              
              if (isBadVersion(mid))
                  right = mid;
              else {
                  left = mid + 1;
              }
          }
          
          return left;
      }
  }

Complexity Analysis:
  Time: O(logn) - At each stage of search, split the input array in half
  Space: O(1)