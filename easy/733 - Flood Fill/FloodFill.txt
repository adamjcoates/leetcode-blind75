https://leetcode.com/problems/flood-fill/

Problem:
  An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.

  You are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].

  To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with color.

  Return the modified image after performing the flood fill.

Examples:
  Example 1:
  Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2
  Output: [[2,2,2],[2,2,0],[2,0,1]]
  Explanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.
  Note the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.

  Example 2:
  Input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0
  Output: [[0,0,0],[0,0,0]]
  Explanation: The starting pixel is already colored 0, so no changes are made to the image.

Constraints:
  m == image.length
  n == image[i].length
  1 <= m, n <= 50
  0 <= image[i][j], color < 216
  0 <= sr < m
  0 <= sc < n

Pattern(s): Graph, DFS

Parameter(s): int[][] image, int sr, int sc, int color

Algorithm: 
  [1,1,1]     [2,2,2]
  [1,1,0] --> [2,2,0]
  [1,0,1]     [2,0,1]

  Guard clause if current pixel (image[sr][sc]) is already the new color, return image (we are done)

  Depth first search with (image, sr, sc, starting color, new color) as parameters

  Return image

  Dfs helper method returns void taking (image, sr, sc, starting color, new color) as parameters
    Base case:
      Check if sr and sc are out of bounds, return image
      Check if current pixel is not equal to starting color, return image

    Recursive case:
      Set current pixel to new color

      Recursively call dfs helper method 4 more times on up, down, left, and right pixels
          

Code:
  class Solution {
      public int[][] floodFill(int[][] image, int sr, int sc, int color) {
          
          if (image[sr][sc] == color) return image;
          
          dfs(image, sr, sc, image[sr][sc], color);
          
          return image;
      }
      
      private void dfs(int[][] image, int sr, int sc, int startColor, int newColor) {
          
          if (sr < 0 || sc < 0 || sr >= image.length || sc >= image[0].length || image[sr][sc] != startColor) {
              return;
          }
          
          image[sr][sc] = newColor;
          
          dfs(image, sr - 1, sc, startColor, newColor);
          dfs(image, sr + 1, sc, startColor, newColor);
          dfs(image, sr, sc - 1, startColor, newColor);
          dfs(image, sr, sc + 1, startColor, newColor);
      }
  }
Complexity Analysis:
  Time: O(n) - May visit every pixel in worst case scenario
  Space: O(n) - call stack size grows relative to size of input during dfs