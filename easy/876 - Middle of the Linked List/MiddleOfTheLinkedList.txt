https://leetcode.com/problems/middle-of-the-linked-list/

Problem:
  Given the head of a singly linked list, return the middle node of the linked list.

  If there are two middle nodes, return the second middle node.
 
Examples:
  Example 1:
  Input: head = [1,2,3,4,5]
  Output: [3,4,5]
  Explanation: The middle node of the list is node 3.
  Example 2:
  Input: head = [1,2,3,4,5,6]
  Output: [4,5,6]
  Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 

Constraints:
  The number of nodes in the list is in the range [1, 100].
  1 <= Node.val <= 100

Pattern(s): Linked List, Fast and Slow

Parameter(s): ListNode head

Algorithm:
  Initialize a fast and slow pointer to the head of the linked list

  Loop while fast and fast.next are not null
    Set slow to slow.next
    Set fast to fast.next.next

  Return slow

Code:
  /**
  * Definition for singly-linked list.
  * public class ListNode {
  *     int val;
  *     ListNode next;
  *     ListNode() {}
  *     ListNode(int val) { this.val = val; }
  *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
  * }
  */
  class Solution {
      public ListNode middleNode(ListNode head) {
          ListNode fast = head;
          ListNode slow = head;
          
          while (fast != null && fast.next != null) {
              slow = slow.next;
              fast = fast.next.next;
          }
          
          return slow;
      }
  }

Complexity Analysis:
  Time: O(n)
  Space: O(1)