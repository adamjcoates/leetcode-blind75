https://leetcode.com/problems/majority-element/

Problem:
  Given an array nums of size n, return the majority element.

  The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Examples:
  Example 1:
  Input: nums = [3,2,3]
  Output: 3

  Example 2:
  Input: nums = [2,2,1,1,1,2,2]
  Output: 2

Constraints:
  n == nums.length
  1 <= n <= 5 * 104
  -109 <= nums[i] <= 109

Pattern(s): Array, Map

Parameter(s): int[] nums

Algorithm:
  Initialize an Integer, Integer frequency Map

  Loop through the array
    Increment the frequency of the current number into the Map
    If we reach a frequency of n / 2, we can return n since a majority element has to exist

  Throw IllegalArgumentException if we get here since the majority element has to exist

  Note: Could use Boyer-Moore Voting Algorithm to use O(1) extra space

Code:
  class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer, Integer> freqMap = new HashMap<>();
        
        for (int n : nums) {
            freqMap.put(n, freqMap.getOrDefault(n, 0) + 1);
            if (freqMap.get(n) > nums.length / 2) return n;
        }
        
        throw new IllegalArgumentException("Majority element does not exist");
    }
  }

Complexity Analysis:
  Time: O(n)
  Space: O(n)