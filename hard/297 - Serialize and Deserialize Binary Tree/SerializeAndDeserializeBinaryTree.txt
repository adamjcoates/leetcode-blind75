https://leetcode.com/problems/serialize-and-deserialize-binary-tree/

Problem:
  Serialization is the process of converting a data structure or object into a sequence of bits 
  so that it can be stored in a file or memory buffer, or transmitted across a network connection link 
  to be reconstructed later in the same or another computer environment.

  Design an algorithm to serialize and deserialize a binary tree. 
  There is no restriction on how your serialization/deserialization algorithm should work. 
  You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

  Clarification: The input/output format is the same as how LeetCode serializes a binary tree. 
  You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Examples:
  Example 1:
  Input: root = [1,2,3,null,null,4,5]
  Output: [1,2,3,null,null,4,5]

  Example 2:
  Input: root = []
  Output: []
 
Constraints:
  The number of nodes in the tree is in the range [0, 104].
  -1000 <= Node.val <= 1000

Pattern(s): Binary Tree, DFS

Parameter(s): TreeNode root, 

Algorithm:
Preorder traversal

Code:
  public class Codec {
      
      private static final String NN = "X";
      private static final String DELIMITER = ",";
      
      // Encodes a tree to a single string.
      public String serialize(TreeNode root) {
          StringBuilder res = new StringBuilder();
          
          dfs(root, res);
          
          return res.toString();
      }
      
      private void dfs(TreeNode node, StringBuilder sb) {
          if (node == null) {
              sb.append(NN).append(DELIMITER);
              return;
          }
          
          sb.append(node.val).append(DELIMITER);
          dfs(node.left, sb);
          dfs(node.right, sb);
      }

      // Decodes your encoded data to tree.
      public TreeNode deserialize(String data) {
          Deque<String> queue = new LinkedList<>();
          
          queue.addAll(Arrays.asList(data.split(DELIMITER)));
          
          return build(queue);
      }
      
      private TreeNode build(Deque<String> queue) {
          String val = queue.poll();
          if (NN.equals(val)) return null;
          
          TreeNode root = new TreeNode(Integer.valueOf(val));
          root.left = build(queue);
          root.right = build(queue);
          return root;
      }
  }

Complexity Analysis:
  Time: O(n)
  Space: O(n)